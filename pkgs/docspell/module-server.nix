{config, lib, pkgs, ...}:

with lib;
let
  cfg = config.services.docspellserver;
  user = if cfg.runAs == null then "root" else cfg.runAs;

  configFile = pkgs.writeText "docspell-server.conf" ''
    docspell.server {
  # This is shown in the top right corner of the web application
  app-name = "${cfg.appName}"

  # This is the id of this node. If you run more than one server, you
  # have to make sure to provide unique ids per node.
  app-id = "${cfg.appId}"

  # This is the base URL this application is deployed to. This is used
  # to create absolute URLs and to configure the cookie.
  base-url = "${cfg.baseUrl}"

  # Where the server binds to.
  bind {
    address = "${cfg.bindHost}"
    port = ${toString cfg.bindPort}
  }

  # Authentication.
  auth {

    # The secret for this server that is used to sign the authenicator
    # tokens. If multiple servers are running, all must share the same
    # secret. You can use base64 or hex strings (prefix with b64: and
    # hex:, respectively)
    server-secret = "${cfg.serverSecret}"

    # How long an authentication token is valid. The web application
    # will get a new one periodically.
    session-valid = "${cfg.sessionTime}"
  }

  # Configuration for the backend.
  backend {

    # The database connection.
    #
    # By default a H2 file-based database is configured. You can
    # provide a postgresql or mariadb connection here. When using H2
    # use the PostgreSQL compatibility mode and AUTO_SERVER feature.
    jdbc {
      url = "${cfg.jdbc.url}"
      user = "${cfg.jdbc.user}"
      password = "${cfg.jdbc.password}"
    }

    # Configuration for registering new users.
    signup {

      # The mode defines if new users can signup or not. It can have
      # three values:
      #
      # - open: every new user can sign up
      # - invite: new users can sign up only if they provide a correct
      #   invitation key. Invitation keys can be generated by the
      #   server.
      # - closed: signing up is disabled.
      mode = "${cfg.signup.mode}"

      # If mode == 'invite', a password must be provided to generate
      # invitation keys. It must not be empty.
      new-invite-password = "${cfg.signup.newInvitePassword}"

      # If mode == 'invite', this is the period an invitation token is
      # considered valid.
      invite-time = "${cfg.signup.inviteTime}"
    }

    files {
      # Defines the chunk size used to store bytes. This will affect
      # the memory footprint when uploading and downloading files. At
      # most this amount is loaded into RAM for down- and uploading.
      #
      # It also defines the chunk size used for the blobs inside the
      # database.
      chunk-size = 524288

      # The file content types that are considered valid. Docspell
      # will only pass these files to processing. The processing code
      # itself has also checks for which files are supported and which
      # not. This affects the uploading part and is a first check to
      # avoid that 'bad' files get into the system.
      valid-mime-types = [ "application/pdf" ]
    }
  }
    }
  '';
in {

  ## interface
  options = {
    services.docspellserver = {
      enable = mkOption {
        default = false;
        description = "Whether to enable docspell.";
      };

      runAs = mkOption {
        type = types.nullOr types.string;
        default = "docspell";
        description = ''
          The user that runs the docspell server process.
        '';
      };

      appName = mkOption {
        type = types.string;
        default = "Docspell";
        description = "The name used in the web ui and in notification mails.";
      };

      appId = mkOption {
        type = types.string;
        default = "docspell-restserver1";
        description = "The node id. Must be unique across all docspell nodes.";
      };

      baseUrl = mkOption {
        type = types.string;
        default = "http://localhost:7880";
        description = "The base url where attentive is deployed.";
      };

      bindHost = mkOption {
        type = types.string;
        default = "localhost";
        description = "The address to bind the webserver";
      };
      bindPort = mkOption {
        type = types.int;
        default = 7880;
        description = "The port to bind the web server";
      };
      sessionTime = mkOption {
        type = types.string;
        default = "3 days";
        description = "How long a generated invitation key is valid.";
      };
      serverSecret = mkOption {
        type = types.string;
        default = "hex:caffee";
        description = "The server secret used to sign cookies/authentication tokens.";
      };

      jdbc = mkOption {
        type = types.submodule ({
          options = {
            url = mkOption {
              type = types.string;
              default = "jdbc:h2:///tmp/docspell-demo.db;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE;AUTO_SERVER=TRUE";
              description = ''
                The URL to the database. By default a file-based database is
                used. It should also work with mariadb and postgresql.

                Examples:
                   "jdbc:mariadb://192.168.1.172:3306/docspell"
                   "jdbc:postgresql://localhost:5432/docspell"
                   "jdbc:h2:///home/dbs/docspell.db;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE;AUTO_SERVER=TRUE"

              '';
            };
            user = mkOption {
              type = types.string;
              default = "sa";
              description = "The user name to connect to the database.";
            };
            password = mkOption {
              type = types.string;
              default = "";
              description = "The password to connect to the database.";
            };
            poolSize = mkOption {
              type = types.int;
              default = 10;
              description = "The database pool size.";
            };
          };
        });
        default = {
          url = "jdbc:h2:///tmp/docspell-demo.db;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE;AUTO_SERVER=TRUE";
          user = "sa";
          password = "";
          poolSize = 10;
        };
        description = "Database connection settings";
      };
      signup = mkOption {
        type = types.submodule ({
          options = {
            mode = mkOption {
              type = types.string;
              default = "closed";
              description = ''
                Registration of new accounts may be one of:
                - open: Everybody can create new accounts.
                - closed: No one can create new accounts; registration is disabled.
                - invite: Registration is possible only with the correct invitation key.
              '';
            };
            newInvitePassword = mkOption {
              type = types.string;
              default = "";
              description = ''
                The "super" invitation password used to generate new invitations.
                If empty, generating invitation keys is not possible.
              '';
            };
            inviteTime = mkOption {
              type = types.string;
              default = "3 days";
              description = "How long a generated invitation key is valid.";
            };
          };
        });
        default = {
          mode = "closed";
          newInvitePassword = "";
          inviteTime = "3 days";
        };
        description = "Registration settings";
      };
    };
  };

  ## implementation
  config = mkIf config.services.docspellserver.enable {

    networking.firewall.allowedTCPPorts = [ cfg.bindPort ];

    systemd.services.docspellserver =
    let
      cmd = "${pkgs.docspell.server}/bin/docspell-restserver -Dlogback.configurationFile=${./logback.xml} ${configFile}";
    in
    {
      description = "Docspell Rest Server";
      after = [ "networking.target" ];
      wantedBy = [ "multi-user.target" ];
      path = [ pkgs.gawk ];
      preStart = ''
      '';

      script =
        if user == "root" then cmd
        else "${pkgs.su}/bin/su -s ${pkgs.bash}/bin/sh ${user} -c \"${cmd}\"";
    };
  };
}
