{ config, lib, pkgs, ... }:

with config;

let
  localcf = pkgs.writeText "sa-local.cf"  ''
    # set required score a bit higher
    required_score 5.5

    # don't use any dns blacklists
    skip_rbl_checks 1

    # leave the message as is (just append headers)
    report_safe 0

    # include generated whitelist
    # which is generated by ${mkwhitelist} script via cron
    include whitelist_from.txt

    # learn settings
    #bayes_auto_learn_threshold_nonspam 0.1
    bayes_auto_learn_threshold_spam 10.0
  '';
  mkwhitelist = pkgs.writeScript "mk-whitelist.sh" ''
  #!/bin/sh -e
  # go through all Sent mailboxes and collect To addresses
  # copied from: http://wiki.apache.org/spamassassin/ManualWhitelist#Automatically_whitelisting_people_you.27ve_emailed
  SENTMAIL=
  for d in /var/data/users/*; do  #*/
     if [ -r "$d/Maildir/.Sent/cur" ]; then
       SENTMAIL="$SENTMAIL $d/Maildir/.Sent/cur/*"
     fi
  done
  echo "whitelist_from *@eknet.org"
  cat $SENTMAIL |
        grep -Ei '^(To|cc|bcc):' |
        grep -oEi '[a-z0-9_.=/-]+@([a-z0-9-]+\.)+[a-z]{2,}' |
        tr "A-Z" "a-z" |
        sort -u |
        xargs -n 100 echo "whitelist_from"
  '';
  learnfromusers = pkgs.writeScript "learn-ham-and-spam.sh" ''
  #!/bin/sh -e
  LEARNHAM=".LearnNotSpam"
  LEARNSPAM=".LearnSpam"

  learn() {
    user=$(expr match ''${2#/var/data/users/} '\([a-zA-Z0-9]*\)')
    echo "Learn ham for user $userâ€¦"
    ${pkgs.spamassassin}/bin/sa-learn -u $user --dbpath /var/lib/spamassassin/user-$user/bayes $1 $2
    chown -R spamd:spamd /var/lib/spamassassin/user-$user/
  }
  find /var/data/users -type d | grep "$LEARNHAM/cur" | while read f; do
    learn "--ham" $f
  done
  find /var/data/users -type d | grep "$LEARNSPAM/cur" | while read f; do
    learn "--spam" $f
  done
  '';
in
{

  services.spamassassin = {
    enable = true;
    #debug = true;
  };

  services.exim = {
    dataAcl = ''
      # Do not scan messages submitted from our own hosts
      # and locally submitted messages. Since the DATA ACL
      # is not called for messages not submitted via SMTP
      # protocols, we do not need to check for an empty
      # host field.
      accept  hosts = 127.0.0.1:+relay_from_hosts

      # put headers in all messages (no matter if spam or not)
      warn  spam = nobody:true
            condition = ''${if <{$message_size}{80k}{1}{0}}
            add_header = X-Spam-Score: $spam_score ($spam_bar)
            add_header = X-Spam-Report: $spam_report

      # add the X-Spam-Flag header
      warn spam = nobody
           condition = ''${if <{$message_size}{80k}{1}{0}}
           add_header = X-Spam-Flag: YES

      # reject spam at scores > 10
      deny  message = This message scored $spam_score spam points.
            spam = nobody:true
            condition = ''${if >{$spam_score_int}{100}{1}{0}}

     accept
    '';

    moreRouters = ''
      spamassassin_router:
        driver = accept
        transport = spamassassin_local
        condition = "''${if !eq {$received_protocol}{sa-checked} {1} {0}}"
        no_verify
        no_expn

    '';

    moreTransports = ''
      spamassassin_local:
        driver = pipe
        use_bsmtp = true
        command = /var/setuid-wrappers/exim -bS -oMr sa-checked
        transport_filter = ${pkgs.spamassassin}/bin/spamc -f -u $local_part
        home_directory = /var/lib/spamassassin/user-$local_part
        current_directory = /var/lib/spamassassin/
        user = exim
        group = exim
        log_output = true
        return_fail_output = true
        return_path_add = false

    '';
  };

  services.cron.systemCronJobs = [
    "0 3 * * Sun root ${mkwhitelist} > /etc/spamassassin/whitelist_from.txt"
    "0 3 * * Sun root ${learnfromusers}"
  ];

  system.activationScripts = if (services.spamassassin.enable) then {
    spamassassincfg = ''
      mkdir -p /etc/spamassassin
      mkdir -p /var/lib/spamassassin
      chown -R spamd:spamd /var/lib/spamassassin
      cp -n ${pkgs.spamassassin}/share/spamassassin/* /etc/spamassassin/
      #*/
      rm -f /etc/spamassassin/local.cf
      ln -s ${localcf} /etc/spamassassin/local.cf
    '';
  } else {}
;
}
